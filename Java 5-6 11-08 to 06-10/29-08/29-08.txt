2. Polymorphism
Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.
- many methods with same name with different functionality.

Types:
i. Compile-time polymorphism (Method overloading)
 - overloading methods with same name within the class.
 - we can achieve this polymorphism by following ways
   i. by passing different no of parameters
   ii. by passing different data type paramters

ii. Runtime polymorphism (Method overriding)
- writing the method which is present in parent class into child class with same method signature    then it is called method overriding, It's also called as Dynamic Method Dispatch, is a process in which a call to an overridden method is resolved at runtime rather than compile-time.

Note: Runtime polymorphism can't be achieved by data members.


Covariant return type:
Covariant return types in Java allow an overriding method in a subclass to return a more specific type (a subtype) than the return type of the method it overrides in the superclass. This feature enhances type safety and reduces the need for explicit type casting in client code. Covariant return types are only applicable when the return type of the overridden method is a non-primitive type.

final keyword:
The final keyword in Java is a non-access modifier used to prevent modification. It can be applied to variables (value cannot change), methods (cannot be overridden) and classes (cannot be extended).
