Comparable Interface:
The Comparable interface in Java is used to define the natural ordering of objects for a user-defined class. 
It is part of the java.lang package and it provides a compareTo() method to compare instances of the class. 
A class has to implement a Comparable interface to define its natural ordering.

Ex:
class Pair implements Comparable<Pair> {
    @Override
    public int compareTo(Pair o) {
        // Ascending order
        return this.v - o.v; 
    }
}

Comparator Interface:
Comparator interface in Java is used to order the objects of user-defined classes. 
A comparator object is capable of comparing two objects of the same class. Following function compare obj1 with obj2.

when to use:
when there is a requirement of multiple sorting orders, then we can use this comparator interface.

Ex:
class CustomSorting implements Comparator<Pair> {
    @Override
    public int compare(Pair p1, Pair p2) {
        // Ascending order
        return p1.v - p2.v; 
    }
}


Lambda expression:
Lambda Expressions were added in Java 8.
A lambda expression is a short block of code which takes in parameters and returns a value. 
Lambda expressions are similar to methods, but they do not need a name and they can be implemented right in the body of a method.

syntax:
(parameter1, parameter2) -> { code block }




Nested classes:
When one class is declared inside another class then it is called nested class.

types:
1. static member class
   -- if inner class declared with static keyword then it's called static  member class.
ex:
class outer_class{
    // static member class
    static class  inner_class{
           // methods
    }

    // methods
}

2. non static member class (inner class)
   -- when we create non static class inside another class.
ex:
class outer_class{
    // non static member class
    class  inner_class{
           // methods
    }

    // methods
}

3. method local inner class
  - if any class presents inside a method then it's called local inner class.
ex:
class Outer{
    public void print(){
           class LocalClass{
                  // methods
            }

            // object creation
            // inner class methods execution
   }
}


4. anonymous inner class
- it is a class which doesn't have any name.