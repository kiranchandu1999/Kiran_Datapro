Four pillars of OOPs:
1. Inheritance
 - acquiring properties and methods from parent class to child class.
 - we need to use extends keyword with child class to acquire properties        from parent class

types:
i. Single level inheritance
  -- from one parent to one child

ii. Multi level
  -- from grand parent to parent and then parent to child and so on.

iii. Hierarchical inheritance
   -- from one parent class to multiple child classes

iv. Multiple inheritance (not possible by classes in java)
   -- from multiple parents to single child

2. Polymorphism
 - many methods with same name with different functionality.
 - we can achieve polymorphism by following ways
   i. by passing different no of parameters
   ii. by passing different data type paramters

types:
i. Compile-time polymorphism (Method overloading)
  - overloading methods with same name within the class.

ii. Runtime polymorphism (Method overriding)
  - writing the method which is present in parent class into child class with same method signature then it is called method overriding

3. Abstraction:
abstraction is a mechanism which is used for data hiding.
it hides the method implementation details and it shows only definition.
implementation ways:
1. abstract class
2. interface

1. abstract class: (not 100% abstraction)
rules:
- a method implementation can be hidden by making method as abstract.
- if any abstract method presents in any class then that class also should be abstract.
- abstract methods implementation should be done in child class by method overrding.
- we can't create object for abstract classes.
- In abstract class we can have abstract and non abstract methods as well.

2. interface: (100% abstraction)
- interface is similar to class only.
- it is created by using interface keyword intead of class keyword
- we can't create objects for interfaces
- abstract methods implementation should be done in child class by method overriding.
- for method overriding in child class we need to use implements keyword instead of extends keyword for inheritance.
- by default methods in interface are public and abstract.
- by default variables are public, static and final.



