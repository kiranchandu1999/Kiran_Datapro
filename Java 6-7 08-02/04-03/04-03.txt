LocaDateTime class:
It is a class which is used to define date and time. it is coming from java.time package.
syntax:
LocalDateTime date = LocalDateTime.now();
whenever we create date object it will take system date and stores it in the form of long data type.

LocalDate class:
It is for represent the current date.

LocalTime class:
It is for representing the current time.

DateTimeFormatter class:
It is basically used to format the date according to our requirement.

DateTimeFormatter df = DateTimeFormatter.ofPattern("*pattern*");

following letters used to define pattern in above formatter
y --> year
M --> month
W  --> week
d --> day
H  --->  24 hrs format
h  ---> 12 hrs format (AM, PM)
m  ---> minutes
s  ---> seconds


Updates in interface from java 8:
interfaces supports method implemention by 2 ways
- using default keyword
	and 
- using static keyword

interface  Parent {
     // abtsract method
     void showPassword();

     // default methods
     default  void print(){
            // method body
      }

     // static method
     static  void  display(){
            // method body
     }
}


Functional interface:
If any interface having only one abstract method then it is called functional interface. it may have any number of default and static methods.

@Functional Interface
interface interface_name{
     // only one abstract method
     void run();

     // it can have default and static methods
     default void display(){
     }
}


Comparable Interface:
The Comparable interface in Java is used to define the natural ordering of objects for a user-defined class. 
It is part of the java.lang package and it provides a compareTo() method to compare instances of the class. 
A class has to implement a Comparable interface to define its natural ordering.

Ex:
class Pair implements Comparable<Pair> {
    @Override
    public int compareTo(Pair o) {
        // Ascending order
        return this.v - o.v; 
    }
}

Comparator Interface:
Comparator interface in Java is used to order the objects of user-defined classes. 
A comparator object is capable of comparing two objects of the same class. Following function compare obj1 with obj2.

when to use:
when there is a requirement of multiple sorting orders, then we can use this comparator interface.

Ex:
class CustomSorting implements Comparator<Pair> {
    @Override
    public int compareTo(Pair p1, Pair p2) {
        // Ascending order
        return p1.v - p2.v; 
    }
}


Lambda expression:
Lambda Expressions were added in Java 8.
A lambda expression is a short block of code which takes in parameters and returns a value. 
Lambda expressions are similar to methods, but they do not need a name and they can be implemented right in the body of a method.

syntax:
(parameter1, parameter2) -> { code block }
