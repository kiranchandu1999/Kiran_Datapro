Constructor:
A constructor in Java is a special method that is used to initialize objects. The constructor is called when an object of a class is created. It can be used to set initial values for object attributes
Note:
It is similar to method with no return type.
Name of the constructor should be same as class name
It will be called while creating objects of this class
By default JVM will create no paramters constructor for every class
If we create any constructor explicitly, JVM won't create default constructor


this keyword:
- it refers to the current object itself
- it is used to call current object variables and methods as well.
- this() is used to call the constructor of current object.


static keyword:
- using static keyword we can make variables, methods as static.
- if any variable or method is static it is related to class not object related.
- to call static variable or method use class name instead of object name.


Variables types:
1. Instance variables 
   - variables declared within the class
2. Local variables
   - variables declared within the method
3. Static variables
   - variables with static keyword



Four pillars of OOPs:
1. Inheritance
Inheritance in Java enables a class to inherit properties and actions from another class, called a superclass or parent class. A class derived from a superclass is called a subclass or child class.
we need to use extends keyword with child class to acquire properties from parent class.
Inheritance represents the IS-A relationship which is also known as a parent-child relationship.

types:
i. Single level inheritance
  -- from one parent to one child

ii. Multi level
  -- from grand parent to parent and then parent to child and so on.

iii. Hierarchical inheritance
   -- from one parent class to multiple child classes

iv. Multiple inheritance (not possible by classes in java)
   -- from multiple parents to single child

v. Hybrid inheritance
  -- hybrid inheritance is the composition of two or more types of inheritance.


Super keyword:
The super keyword in Java is a reference variable that is used to refer to immediate parent class objects.
Whenever you create the instance of a subclass, an instance of the parent class is created implicitly, which is referred to by the super reference variable.

- super can be used to refer to the immediate parent class instance variable and method.
- super() can be used to invoke the immediate parent class constructor.