Naming convention:
class and interface --->  PascalCase  (FirstClass --- every word first letter should be capital)
method ---> camelCase (getName() -- every word first letter should be capital except first word)
variable ---> camelCase (ex: studentRollNo)
constants ---> UPPER_SNAKE_CASE (ex: MAX_VALUE)
package ---> lowercase with dot seperate (ex: com.example)

Rules:
1. should contain alphabets, digits, underscore (_) and dollor ($)
2. shouldn't use reserved keywords
3. shouldn't start with digit but can start with _ 
4. shouldn't contain any spaces

Data types:
In java data types are divided into 2 categories
- Primitive data types
(note : 1 byte = 8 bits)
1. byte       -    1 byte  --> -2^7 to 2^7 - 1
2. short     -     2 bytes --> -2^15 to 2^15 -1
3. int       -     4 bytes --> -2^31 to 2^31 - 1
4. long      -     8 bytes --> -2^63 to 2^63 - 1
5. float     -     4 bytes (max 6 digits after decimal point)
6. double    -     8 bytes (max 14 digits after decimal point)
7. char      -     2 bytes
8. boolean   -     1 bit

- Non - primitive
1. Strings
2. Arrays
3. Objects

Variables:
It is a container to store data in memory space.

syntax:
datatype  variable_name  =  value;

ex:
int myValue = 5;

Literals:
int ---->     int a = 500;
long ---->    long a = 400L;
double---->   double a = 4.5;
float ---->   float a = 2.8f;
char  ----->  char a = 'c';
String ---->  String s = "hello world";


Unicode system:
Unicode system in a standard to represent the characters of nearly all written languages like (English, Hindi, Chinese etc).
They are represented as uxxxx, "xxxx" defines hexa decimal numbers from 0000 to FFFF
Ex: 
u0041  represents 'A'
System.out.println("\u0041");  // prints 'A'
Note: '\' (back slash) is called as escape character


Operators:
operand  operator  operand
Arithmetic operators: (value)
+, -, *, /, %

Ex:
int a = 5;
int b = 10;

a + b ===> 15

11 / 3 ===> 3
11 % 3 ===> 2


Relational operators (or) Comparison operators: (boolean)
<, >, <=, >=, ==, !=

Ex:
5 < 8 ----> true
a < b ===> true
a > b ===> false
a == b ===> false


Logical operators: (boolean)
logical operation should be done on conditions not on values. condition is nothing but an expression which gives boolean result
&&, ||

Ex:
(a < b) && (a != b) ===> true

(a > b) || (a != b) ===> true


Assignment operators:
=, +=, -=, *=, /=, %=

Ex:
a = b ===> 'b' value assigned to 'a' (now a is 10)

a = a * 2;  (or)  a *= 2;


Bitwise operators:
&, |, ^
110  ---> 2^0 * 0 + 2^1 * 1 + 2^2 * 1  ==> 6
5 & 3 ----> 101 & 011  ----> 001 --> 1
5 | 3 ----> 101 | 011  ----> 111 --> 7
5 ^ 3 ----> 101 ^ 011  ----> 110 --> 6

Shift operators:
left shift ( << )
right shift ( >> )

5 << 1 ----> 101 << 1 ---> 1010 --> 10

12 >> 2 ---> 1100 >> 2 ---> 11 --> 3

Unary operators:
oparand unary_op
int a = 6;
increment (++)
- pre-increment ----> ++a
- post-increment  ----> a++

Ex:
System.out.println(a++);
System.out.println(++a);

o/p:
6
8

decrement (--)
- pre-decrement ----> --a
- post-decrement  -----> a--

Ex:
a = 10;
System.out.println(a--);
System.out.println(--a);

o/p:
10
8