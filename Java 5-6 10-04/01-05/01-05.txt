2. Polymorphism
Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.
- many methods with same name with different functionality.

Types:
i. Compile-time polymorphism (Method overloading)
 - overloading methods with same name within the class.
 - we can achieve this polymorphism by following ways
   i. by passing different no of parameters
   ii. by passing different data type paramters

ii. Runtime polymorphism (Method overriding)
- writing the method which is present in parent class into child class with same method signature    then it is called method overriding, It's also called as Dynamic Method Dispatch, is a process in which a call to an overridden method is resolved at runtime rather than compile-time.

Note: Runtime polymorphism can't be achieved by data members.


Upcasting and Downcasting:
A process of converting one data type to another is known as Typecasting and Upcasting and Downcasting is the type of object typecasting. In Java, the object can also be typecasted like the datatypes. Parent and Child objects are two types of objects. So, there are two types of typecasting possible for an object, i.e., Parent to Child and Child to Parent or can say Upcasting and Downcasting.

syntax for upcasting:
Parent  obj1  =  new Child();


syntax for downcasting:
Parent obj1 =  new Child();
Child obj2  =  (Child) obj1;

3.Abstraction:
abstraction is a mechanism which is used for data hiding.
it hides the method implementation details and it shows only definition.
implementation ways:
i. abstract class
ii. interface

i. abstract class: (not 100% abstraction)
rules:
- a method implementation can be hidden by making method as abstract.
- if any abstract method presents in any class then that class also should be abstract.
- abstract methods implementation should be done in child class by method overrding.
- we can't create object for abstract classes.
- In abstract class we can have abstract and non abstract methods as well.


(ii). interface: (100% abstraction)
- interface is similar to class only.
- it is created by using interface keyword intead of class keyword
- we can't create objects for interfaces
- abstract methods implementation should be done in child class by method overriding.
- for method overriding in child class we need to use implements keyword instead of extends keyword for inheritance.
- by default methods in interface are public and abstract.
- by default variables are public, static and final.