Thread life cycle:
A thread can exist in different states at different point of time. it passes from one state to another state whenever we called method start.

States involved in thread life cycle:
1. New :
  -- this is a state when a new thread created and not yet started.

2. Ready to run :
  -- Thread is started using start method. in this state the thread is ready to      run but control is not given.

3. Running :
  -- Now thread is running in this state.

4. Sleep :
  -- Method sleep() is invoked and thread is sleeping for the given number of      milliseconds.

5. Blocked :
  -- Blocked by other threads for shared resources. it will wait until another     thread invokes notify() or notifyAll().

6. Dead :
   -- Thread got terminated.

Method inside Thread class:
1. currentThread()  --> returns reference to the currently working thread.
2. getName()  --> returns the thread's name
3. getPriority()  --> returns the thread's priority
4. isAlive()  --> tests if the thread is alive
5. run()  --> specifies the code to be executed
6. setName(string) --> changes the name of this thread
7. setPriority(int)  --> changes the priority
8. sleep(milli seconds)  ---> moves the current thread state to sleep and     stops execution till time gets over.
9. start()  --> creates a new thread and calls the run method of the thread.


Input-Output streams:
- A stream is an ordered sequence of data.
- An input stream moves data from external source and output stream sends data into external source.
- A stream that is likned to a file on a disk or printer or any netwrok behaves in the same manner.
- All classes and interfaces related to IO streams are in java.io package

Streams are two types based on stream of data:
1. Byte stream
- this stream contains a collection of bytes.
- All byte streams are derived from InputStream or OutputStream abstract classes.

2. Character stream
- this stream contains a collection of characters.
- All character streams are derived from two abstract classes - Reader and Writer.

In java, 3 streams are created automatically:
- System.out  --> standard output stream
- System.In --> standard input stream
- System.err --> standard error stream


InputStream:
it is an abstract class and it is a super class for all classes representing an input stream of bytes. child classes like FileInputStream, FilterInputStream, BufferedInputStream etc.

OutputStream:
it is an abstract class and it is a super class for all classes representing an output stream of bytes. child classes like FileOutputStream, FilterOutputStream, BufferedOutputStream etc.






 






