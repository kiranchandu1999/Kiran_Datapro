Removing a field from document:
syntax:
db.collection.updateOne({filter}, {$unset: {filedname1: 1, fieldname2: 1, ..}})
- after executing this query, specified fields will get deleted in the first matched document.

syntax:
db.collection.updateMany({filter}, {$unset: {filedname1: 1, fieldname2: 1, ..}})
- after executing this query, specified fields will get deleted in the all matched documents.


Renaming the fileds in a document:
syntax:
db.collection.updateOne({filter}, {$rename: {old_fieldname: 'new_fieldname'}})
- after executing the above query, specified old filed name will be replaced with specified new field name in the first matched document.

syntax:
db.collection.updateMany({filter}, {$rename: {old_fieldname: 'new_fieldname'}})
- after executing the above query, specified old filed name will be replaced with specified new field name in the all matched documents.


Updating values in arrays or embedded documents:
these operators are used to update data inside embedded documents.

syntax:
db.collection.updateOne({filter}, {
  $set: {arrayField.$.innerfiled: 'value'}
})

note: 
- filetering object should contains the particular inner object where we want to change the value inside array field.
- '$' is called positional operator and it will be used as a index for that array.




