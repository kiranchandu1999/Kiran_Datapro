Aggregation pipelies in mongodb:
- Aggregation pipelines have multiple stages and each stage will have different kind of computations / operations.
- Every stage depends on the result of the previous stage.
- to do aggregation we need to use aggregate function and it takes stages in the form of array.

syntax:
db.collection.aggregate([{stage1}, {stage2}, ...])

Different types of stage operations in aggregation:
1. $match:
  -- it is similar to find function but find function can't be used as an aggregation pipeline so this operator will replace that drawback.

syntax:
db.collection.aggregate([
       // stage 1
       {$match : {age : {$gt : 20}}}
])

2. $sort:
  -- it is used to sort the result in aggregation pipelines. if we use sort operator at 2nd stage then the result of the 1st stage will get sorted.

syntax:
{$sort : {filedname : 1 or -1}}

3. $project:
  -- it is similar to projection in find function. if we want to display limited no of fields then should specify value 1 for those fields. _id is default field so if we want to ignore that need to specity 0 for that field.

syntax:
{$project: {field1 : 1, field3 : 1, _id : 0, ...}}


4. $limit:
 -- this operator limits the documents coming from previous stage and passed to next stage.

syntax:
{$limit : value}


5. $count :
 -- this operator returns the no of documents coming from previous stage.

syntax:
{$count : "keyname"}

note: no of documents count will be diplayed as value for specified key.


6. $group:
 -- this operator is used to group the documents by a specified field.
 -- grouping field name should be specified as value for "_id" key.

syntax:
{$group : {_id : "$field", aggregate functions like sum, max, min}}

db.students.aggregate([{$group : {_id : "$city", totalage: {$sum : 1}}}])
output: returns data city wise and sum documents in every grp.

db.students.aggregate([{$group : {_id : "$city", totalage: {$sum : "$age"}}}])
output: returns data city wise and sum of ages in every grp.








