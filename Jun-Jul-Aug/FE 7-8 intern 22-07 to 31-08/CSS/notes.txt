
CSS - Cascading Style Sheets
CSS files are created with extension  ---  .css

Syntax :
selector {
     key1 : value1;
     key2 : value2;
     .......
}

selector :-  to which html element want to apply styling / css
key :-  property of html element on which we want to apply styling
value :- value for the defined proeprty

Example:

h1 {
   color : red;
}

To link HTML file with CSS file need to provide link tag inside head of html document
<link rel="stylesheet" href="css file path">

Types of CSS / Different ways to apply CSS on HTML Document :
- In-line CSS      --> Writing CSS inside html element itself. (inside opening tag by using style attribute)
- Internal CSS    --> By creating style tag inside head of html documnet
	<style>
        		h1 {
           		 color: blue;
       		 }
    	</style>
- External CSS (Recommended) ---> Creating different files for CSS and HTML as well and linking them 

Priority for these above CSS --->  In-line CSS >> Internal >> External

Types of CSS Selectors :
- Simple selectors 
    -- By using html tag name  
	-- p { }
    -- using class name of the element
	-- .class_name { }
    -- using id name of the element  (more priority)
 	-- #id_name { }  
    -- universal selector (selects all elements inside document  - less priority)
	-- * { }

- Combinator selectors
   -- descendant selector (space) for direct and indirect child
           parent_tag <space> child_tag { }
   -- child selector ( > ) for direct child
           - parent>child { }
   --  adjacent sibling selector ( + )
           - parent+child { }
   -- general sibling selector ( ~ )
           - paraent~child { }

- Pseudo-class selectors
    -- selector:pseudo-class { }

- Pseudo element selectors
  -- selector : : pseudo-element { }

- attribute selectors
  -- selector [attr_key = "attr_value"] { }

Properties in CSS :
# color
color can be applied in following ways
- by using color name (like red, blue...)
- by using RGB (red, green, blue) ---> each color ranges from 0 - 255;
- using HEX code (0 - f )  --> #000000 / #000
- using HSL (hue, saturation, lightness)
     -- hue is a degree of color from 0 to 360 (0-red, 120-green, 240-blue)
     -- saturation is a percentage value. 0% for shade of gray and 100% for full color.
    -- lightness is also percentage. 0% is black, 50% is neither light or dark, 100% is white.

# background
- background - color
- background - image
- background - size
- background -  repeat
- background - attachment
- background - position
- background

# borders
- border - width
- border - color
- border - style
- border 
- border - radius ---> to get rounded corners

box-model ---> content << padding << border << margin
box-sizing : border - box;
default : content-box,
custom :  border - box

# margin
margin ---> apply all 4 sides
margin-top, margin-bottom, .....
margin:  top right bottom left
margin: top  right&left  bottom
margin: top&bottom  right&left

# padding
padding ---> apply all 4 sides
padding-top, margin-bottom, .....
padding:  top right bottom left
padding: top  right&left  bottom
padding: top&bottom  right&left

# outline  ---> outside the border
outline-color
outline-width
outline-style
outline-offset
outline

# Text properties
- text color
color -------> to define color of the text

- text alignment
text-align ---> horizontal alignment  (left, center and right)
text-align-last ----> to align last line of text (left, center, right, justify)
vertical-align  ----> vertical alignment of text (text-top, text-bottom, baseline)
direction  ----> content direction
unicode-bidi ---> wording direction

- text decoration
text-decoration-line ----> adds a decoration line (overline, line-through, underline)
text-decoration-color ---> to define line color
text-decoration-style  ---> (solid, dotted....)
text-decoration-thickness ---> for width of the line
text-decoration  ---> shorthand

text-transform ---> to convert case of the selected text (lowercase, uppercase, capitalize)

text spacing
- text-indent   ----> left side space of first line
- letter-spacing ---> defines space b/w every letter
- line-height ----> space between lines
- word-spacing ----> space b/w words

text-shadow  -----> it adds shadow for the given text

# Font properties
- font-family ------>   to set the font family
- font-weight ----> thickness
- font-size -----> sets font size in pixels

# Display properties
display ------> to set the display type of the html element

# Position properties
- static  ----> default position of element
- relative ----> it is positioned relative to it's normal position
- absolute ----> it is positioned relative to the nearest ancestor which is positioned
- fixed ----> it is fixed at same position even page is scrolling
- sticky ----> it is positioned based on scroll position
- inherit ----> it aquires from parent

overflow ----> to manage overflow content inside any html element
overflow : visible (default), 
hidden (hides the overflow content), 
scroll (adds scroll bar), 
auto (adds scroll if necessary)

Flex box 
display: flex (to make container as flex box)

flex-container properties:
we have two axis ---> main and cross
main axis ---> justify-content (default horizontal)
	start, center, end, space-around, space-between, space-evenly
cross axis ---> align-items
		flex-start, center, flex-end
	---> align-content
		space-around, space-between, space-evenly
flex-wrap ----> wrap, nowrap ( to wrap extra content to next line)

flex-direction ---> row (default), row-reverse, column, column-reverse

flex-flow ---> shorthand property for direction and wrap


flex-item properties:
align-self ----> flex-start, center, flex-end
flex-grow ----> to grow individual items if have some space (default -  0)
flex-shrink ----> to shrink individual items relative to other items(default - 1)

grid-container properties:
display: grid;
grid-template-columns: auto 1fr 200px;
grid-template-rows: 2fr auto 200px;
column-gap:
row-gap:
gap: row_gap  col_gap;
justify-content ---> to position along main axis
align-content ---> to position along cross axis

grid-item properties:
grid-column-start: start of column  ex: 1
grid-column-end: end of column  ex: 3
grid-column ----> shorthand for grid col start and end ---> ex: 1 / 3

grid-row-start: start of row  ex: 1
grid-row-end: end of row  ex: 3
grid-row----> shorthand for grid row start and end ---> ex: 1 / 3

Transition properties:
transition-property: padding/ color/ bg/ width....
transition-duration: how much time it should take
transition-delay: time delay to start transition
transition-timing-function: way of transition
  -- ease ---> slow start then fast then slow end
  -- linear ---> follows same speed
  -- ease-in  ---> slow start then fast
  -- ease-out ---> slow end
  -- ease-in-out  ---> slow start and end
transition: property  duration  timing-funtion  delay 

Transform properties:
It changes the structure position and layout
transform: rotate(deg)  ---> rotate in clock wise direction 
                    : scale( times (1.5, 2.5))  ----> scale either X or Y direction
                    : translate(x, y)  ---> move along x and y axis
	: translate3d(x, y, z) ----> move along x, y and z axis.
                    : skew(deg)   ----> tilt along x axis in anti clockwise
Note:  By using negative values we can achieve reverse operationals transforms.


Animations:
- first need to create animation with some name
syntax:
@keyframes  xyz {
       from { initial state / multiple css properties }
       to { final state / multiple css properties }
}

@keyframes  xyz {
       0% { initial state  / multiple css properties }
       25% { mid state / multiple css properties}
       50% { mid state / multiple css properties}
       100% { final state / multiple css properties}
}

- need to apply this animation in our element css property
selector {
    animation-name : xyz;
}

animation-properties:
animation-name:  mention defined animation name
animation-duration: how long animation should run
animation-delay:  mention delay time
animation-iteration-count: no of times animation should run
animation-direction:  in which direction animation should run
animation-timing-function:  speed curve of animation
animation: shorthand property


Media queries: 
		





