Array:
It is a fixed size data structure which stores data of similar type.
it follows 0th based indexing to store elements in it.
it is an object which stores elements in consecutive memory locations.

syntax:
data_type[ ]    variable_name   =   new   data_type[ size ];
ex:---->   int[ ]   arr1  =  new  int[5];   // array declaration
// array initialization --->  int[ ]  arr2  =  {5, 10, 12, 7, 8};

to read and write data into an array:
arr_name[index]  =  value;  // inserting data into array
arr_name[index];      // reading data from array

for each loop:
to read the data from a set of elements of same data type.
syntax:
for(data_type  variable_name : array/set) {
      // body
}

multi dimensional array:
when an array which contains another array as an element in it then it is called 2D array similarly 3D and so on.

syntax:
data_type[ ][ ]  variable name  = new data_type[ rows ][ cols ];
ex:
 --  2, 4, 6, 8
      1, 3, 5, 7
      4, 6, 1, 5
---> int[ ][ ]  arr3 =  new int[3][4];   // declaration
----> int[ ][ ]  arr4  =  { {2, 4, 6, 8}, {1, 3, 5, 7}, {4, 6, 1, 5}};

// to read and write:
arr4[0][1]    ----> 4

Multi dimensional array:
when an array contains multiple arrays in it then it is called multi-dimensional array.

syntax for 2D:
data_type[ ][ ]  variable_name  =  new  data_type[ rows ][ cols ];
ex:  4, 5, 8, 6
        1, 3, 7, 2
         9, 4, 5, 1
int[ ][ ]  arr1  =  new int[3][4];

// data read and write
arr1[1][2] ---> 7


for each loop / enhanced for loop:
syntax:
for(data_type  variable_name : array/set) {
      // loop body
}


Wrapper class:
It's a class which is built based on primitive data types. so that these classes are oftenly used with collection api (stack, queue, etc).
byte ---->   Byte
short --->   Short
int     ---->   Integer
long   --->   Long
float    --->  Float
double  ----> Double
char    ---->   Character
boolean   ---->  Boolean

boxing:  converting primitive to wrapper class object
ex: Interger a1 = Integer.valueOf(10);

un-boxing: converting wrapper class object to primitive
ex: int a2 = a1.intValue();

note:
we can do boxing and unboxing automatically. those are called as
auto-boxing and auto un-boxing

String:
It is a class in java which is used to store sequence of characters.
we can create strings in following ways:
1. using string literal
syntax:  String s1 = " ";
- these kind of string objects will be stored inside string constant pool which is present inside heap area.

2. using new keyword
syntax: String s2 = new String(" ");
- these kind of string objects will be stored in direct heap area not inside string constant pool.

methods:
1. charAt(index)   --->  to get character at given index.
2. length()     ---->  to get the string size;
3. startsWith(String)   ---> to check starting with given string


StringBuffer: (Synchronized)
StringBuffer is a class which is used in place of strings why because if we are trying to change or modify any string we can't. because strings are immutable (can't modify). so in that case we can use string buffer instead of string.

methods:
- setCharAt(index, char) ---> to set character at particular index.


StringBuilder: (Non Synchronized)
it is also same like string buffer class but it is non synchronized. works faster than string buffer.


StringJoiner:
it is a class which is used to join multiple strings with defined delimeter, prefix and suffix to get the final output.
syntax:
StringJoiner sj = new StringJoiner(delimeter, prefix, suffix);
sj.add("string1");
sj.add("string2");

"["java"]" + "python"   ----> "[java]python"   ( normal string exec)

"[java]" + "python"   ----> "[java, python]"   ( using string joiner)
 

Math class:
It is a class which contains methods related to mathematical operations.

methods: (static)
- abs(number)  ---> it will return positive number as output
- min(num1, num2) ---> it will return minimum of both
- max(num1, num2)  ---> will return maximum of both params
- round(double)   ---> return after rounding it.
- pow(base, power)  --> return base to the power value
- random()  ---> it will generate 0 to 1 in decimal points.


Arrays class:
It is a class which contains methods for different operations on array like searching, sorting, etc.

methods: (static)
- binarySearch(array, value) ----> it will search given value in that array
- sort(array) --> to sort the array
- fill(array, value) --> fill with given value
- copyOf(arr, length) --> copies array of given length