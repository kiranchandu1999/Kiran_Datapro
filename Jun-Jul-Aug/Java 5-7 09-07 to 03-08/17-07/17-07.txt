Date class:
It is a class which is used to define date and time.
syntax:
Date  object_name  =  new Date();
whenever we create date object it will take system date and stores it in the form of long data type.

DateFormat class:
it is an abstract class through which we  can format our date object.
it has following methods to create object
- getDateInstance()
- getDateInstance(style)
- getTimeInstance()
- getTimeInstance(style)

style --> DEFAULT, SHORT, MEDIUM, FULL


SimpleDateFormat class:
it is a class through which we can get date in defined format.
SimpleDateFormat  sdf   =  new SimpleDateFormat(style);

y --> year
M --> month
W  --> week
d --> day
H  --->  24 hrs format
h  ---> 12 hrs format (AM, PM)
m  ---> minutes
s  ---> seconds


Updates in interface from java 8:
interfaces supports method implemention by 2 ways
- using default keyword

- using static keyword

interface  Parent {
     // abtsract method
     void showPassword();

     // default methods
     default  void print(){
            // method body
      }

     // static method
     static  void  display(){
            // method body
     }
}


Functional interface:
If any interface having only one abstract method then it is called functional interface. it may have any number of default and static methods.

@Functional Interface
interface interface_name{
     // only one abstract method
     void run();

     // it can have default and static methods
     default void display(){
     }
}

Nested classes:
When one class is declared inside another class then it is called nested class.

types:
1. static member class
   -- if inner class declared with static keyword then it's called static     member class.
ex:
class outer_class{
    // static member class
    static class  inner_class{
           // methods
    }

    // methods
}

2. non static member class (inner class)
   -- when we create non static class inside another class.
ex:
class outer_class{
    // non static member class
    class  inner_class{
           // methods
    }

    // methods
}

3. method local inner class
  - if any class presents inside a method then it's called local inner class.
ex:
class Outer{
    public void print(){
           class LocalClass{
                  // methods
            }

            // object creation
            // inner class methods execution
   }
}


4. anonymous inner class
- it is a class which doesn't have any name.

